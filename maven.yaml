Apache Maven: 
  - Apache Maven is an open-source and a powerful build automation tool primarily used for Java projects. 
It simplifies the process of managing and building software projects by providing a uniform build system, dependency management, 
and project management. It was developed by The Apache Software Foundation


What is Build?: 
  - This refers to the process by which a source code is converted into a standalone form that can be run on a computer. 
    It can also be refered to the process by which a source code is compiled to a deployable artifact to the end user


Other Build Tools:
  - Java --> Maven, Gradle, Ant

  - NodeJS --> npm

  - Python --> pybuilder

  - C and C++ --> CMake

  - Ruby --> Rake

  - .Net --> MSBuild


Maven Specifications:
  - Maven is an open-source software.
  - Maven is implemented in Java programming language.
    - It operates on Java Runtime Environment (JRE).
    - Maven development relies on Java Development Kit (JDK), encompassing Java Virtual Machine (JVM).
    - JVM, constituting the heart of Java, interprets Java bytecode into machine-readable instructions.


Main Directories in Maven:
  - src/main/java: This contains the main Java source code files for your project
  - src/main/resources: Resources such as configuration files, properties files, XML files, and static assets like images or 
    CSS files are stored here
  - src/test/java: Unit tests, integration tests, and other types of tests are typically stored here to ensure the quality and 
    correctness of your code
  - src/main/webapp (for web projects): This directory contains web application resources for web projects such as HTML files, 
    CSS files, JavaScript files, and other web-related assets
  - target: It contains compiled class files, packaged artifacts (JAR, WAR, EAR, etc.), and other generated files produced by Maven
    and it is generated by Maven during the build process


Key Features of Maven:
  - Project Object Model (POM): POM stands for Project Object Model. It is fundamental unit of work in Maven. 
  It is an XML file that resides in the base directory of the project as pom.xml. It defines a set of rules for encoding 
  documents in a format that is both human-readable and machine-readable

  - Dependency Management: This simplifies the automatically downloading required dependencies from central repositories like 
  Maven Central. Maven follows a transitive dependency resolution mechanism, resolving and downloading dependencies transitively

  - Build Lifecycle: A Build Lifecycle is a well-defined sequence of phases, which define the order in which the goals are to be 
  executed. Here phase represents a stage in life cycle

  - Plugins: Plugins are the central feature of Maven that allow for the reuse of common build logic across multiple projects


Key Elements In POM.xml file:
  - Project Information: This includes the project name, project description, project version, and other informations related to
    the project

  - Dependencies: This contains list of dependencies, external libraries and frameworks required by the project.

  - Build Settings or Configurations: This includes informations about the build process, source code directories, targets
    directories, and plugins required for building the project

  - Plugins: This lists all Maven plugins required for executing the project successfully


Maven Lifecycle:
  -  Maven lifecycle is a predefined sequence of phases that defines the build process for a project

  There are 3 Lifecycles in Maven:
  1. Clean Lifecycle: This lifecycle is responsible for cleaning the project directory before the build process begins and it
    ensures that the project directory is in a clean state by removing any previously generated files and directories

  2. Site Lifecycle: It is used to generate project websites, documentation, and other reports to provide information about 
  the project

  3. Default Lifecycle: The Default Lifecycle is the core lifecycle in Maven, responsible for building, testing, and packaging 
  the project and it consists of a sequence of phases that are executed in a specific order to produce the final project artifact

    - Phases in Default Lifecycle:
      - validate: Validates the project structure and configuration.
      - compile: Compiles the source code of the project.
      - test: Runs unit tests for the project.
      - package: Packages compiled code into a distributable format (e.g., JAR, WAR).
      - verify: Runs additional checks to verify the correctness of the package.
      - install: Installs the package into the local Maven repository for use in other projects.
      - deploy: Copies the package to a remote repository for sharing with other developers or projects.


Types of Java Packages in Maven:
  - JAR (Java Application ARchive): JAR (Java ARchive) is a package file format typically used to aggregate many Java class files 
    and associated metadata and resources (text, images, etc.) into one file to distribute application software or libraries on the 
    Java platform

  - WAR (Web Application ARchive): WAR packages are used to package web applications. They contain web resources 
    (HTML, CSS, JavaScript), server-side Java classes (Servlets, JSPs), libraries (JAR files), and deployment descriptors (web.xml)
    WAR files are deployed to servlet containers like Apache Tomcat or Jetty for execution

  - EAR (Enterprise Application ARchive): EAR packages are used for enterprise applications consisting of multiple modules.
    They can contain multiple JAR files, WAR files, and additional resources required for the application


Types of Maven Repositories:
  - Local Repository: The Local Repository is a directory on your local file system where Maven stores project artifacts and 
    dependencies. The local repository is located in the .m2 directory in the user's home directory (~/.m2)

  - Remote Repository: Remote repositories are centralized repositories hosted on remote servers where Maven retrieves 
    dependencies and plugins that are not available in the local repository. Example, Nexus etc.